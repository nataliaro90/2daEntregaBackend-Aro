<div class="container-realtime">
    <h1>Productos en Tiempo Real</h1>
    
    <div class="product-controls">
        <h2>Agregar Nuevo Producto</h2>
        <form id="productForm">
            <input type="text" name="title" placeholder="Título" required>
            <input type="text" name="description" placeholder="Descripción" required>
            <input type="number" name="price" placeholder="Precio" step="0.01" required>
            <input type="text" name="code" placeholder="Código Único" required>
            <input type="number" name="stock" placeholder="Stock" required>
            <input type="text" name="category" placeholder="Categoría" required>
            <label><input type="checkbox" name="status" checked> Disponible</label> 
            <input type="text" name="thumbnails" placeholder="URLs de miniaturas (separadas por coma)">
            <button type="submit">Agregar Producto</button>
        </form>
    </div>

    <div class="product-list-realtime">
        <h2>Listado Actual de Productos</h2>
        <ul id="productList">
            {{#each products}}
                <li class="product-item" data-id="{{this.id}}">
                    <strong>{{this.title}}</strong> - ${{this.price}} (Stock: {{this.stock}})
                    <p>{{this.description}}</p>
                    <button class="delete-btn" data-id="{{this.id}}">Eliminar</button>
                </li>
            {{else}}
                <li id="no-products-message">No hay productos en tiempo real.</li>
            {{/each}}
        </ul>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    const form = document.getElementById('productForm');
    const productList = document.getElementById('productList');
    const noProductsMessage = document.getElementById('no-products-message');

    // Función para renderizar la lista de productos
    const renderProducts = (products) => {
        productList.innerHTML = ''; // Limpiar la lista existente
        if (products && products.length > 0) {
            products.forEach(product => {
                const li = document.createElement('li');
                li.className = 'product-item';
                li.dataset.id = product.id; // Almacenar el ID en un data attribute
                li.innerHTML = `
                    <strong>${product.title}</strong> - $${product.price} (Stock: ${product.stock})
                    <p>${product.description}</p>
                    <button class="delete-btn" data-id="${product.id}">Eliminar</button>
                `;
                productList.appendChild(li);
            });
            if (noProductsMessage) noProductsMessage.style.display = 'none'; // Ocultar mensaje si hay productos
        } else {
            // Si no hay productos, mostrar el mensaje o asegurar que existe
            if (!noProductsMessage) {
                const msgLi = document.createElement('li');
                msgLi.id = 'no-products-message';
                msgLi.textContent = 'No hay productos en tiempo real.';
                productList.appendChild(msgLi);
            } else {
                noProductsMessage.style.display = 'block';
            }
        }

        // Re-adjuntar eventos a los botones de eliminar después de cada renderizado
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.onclick = () => eliminarProducto(button.dataset.id);
        });
    };

    // Corrección 5: Cuando la página se carga, pedir los productos iniciales al servidor.
    // Opcional: Esto podría emitirse también en el 'connect' de socket.io,
    // pero para la carga inicial de la página, un evento DOMContentLoaded es adecuado.
    document.addEventListener('DOMContentLoaded', () => {
        socket.emit('requestInitialProducts'); // Nuevo evento
        console.log('Solicitando productos iniciales al servidor...');
    });


    // Escuchar el evento de conexión de Socket.IO
    socket.on('connect', () => {
        console.log('Conectado al servidor de WebSocket.');
        // Puedes emitir requestInitialProducts aquí también si prefieres
        // que se solicite solo cuando la conexión se establezca completamente.
        // socket.emit('requestInitialProducts'); 
    });

    // Escuchar el evento de desconexión
    socket.on('disconnect', () => {
        console.log('Desconectado del servidor de WebSocket.');
    });

    // Escuchar el evento de actualización de productos (cuando se añade/elimina)
    socket.on('actualizarProductos', (productos) => {
        console.log('Productos actualizados recibidos:', productos);
        renderProducts(productos);
    });

    form.addEventListener('submit', e => {
        e.preventDefault();
        const formData = new FormData(form);
        const product = Object.fromEntries(formData.entries());

        // Convertir tipos de datos
        product.price = parseFloat(product.price);
        product.stock = parseInt(product.stock);
        // El status se obtiene del checkbox
        product.status = formData.get('status') === 'on'; // 'on' si está marcado, undefined si no
        if (!product.status) product.status = false; // Asegura que siempre sea booleano

        // Manejar thumbnails: dividir por coma y limpiar espacios
        if (product.thumbnails) {
            product.thumbnails = product.thumbnails.split(',').map(url => url.trim()).filter(url => url !== '');
        } else {
            product.thumbnails = [];
        }


        socket.emit('nuevoProducto', product);
        form.reset();
    });

    // Función global para eliminar producto (llamada desde el botón)
    function eliminarProducto(id) {
        console.log('Emitiendo eliminarProducto con ID:', id);
        socket.emit('eliminarProducto', parseInt(id)); // Asegúrate de enviar un número
    }
</script>

<style>
    /* Estilos específicos para esta vista */
    .container-realtime {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .product-controls, .product-list-realtime {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid #eee;
        border-radius: 5px;
        background-color: #fff;
    }
    .product-controls form {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }
    .product-controls form input[type="text"],
    .product-controls form input[type="number"] {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box; /* Asegura que el padding no afecte el ancho */
    }
    .product-controls form button[type="submit"] {
        grid-column: span 2;
        padding: 10px 15px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }
    .product-controls form button[type="submit"]:hover {
        background-color: #45a049;
    }
    .product-list-realtime ul {
        list-style: none;
        padding: 0;
    }
    .product-item {
        background-color: #e0e0e0;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap; /* Permite que los elementos se envuelvan en pantallas pequeñas */
    }
    .product-item strong {
        color: #333;
        margin-right: 10px;
    }
    .product-item p {
        flex-basis: 100%; /* Descripción en nueva línea */
        margin-top: 5px;
        margin-bottom: 5px;
        color: #666;
    }
    .delete-btn {
        background-color: #f44336;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }
    .delete-btn:hover {
        background-color: #da190b;
    }
    #no-products-message {
        text-align: center;
        color: #888;
        padding: 20px;
        border: 1px dashed #ccc;
        border-radius: 5px;
        margin-top: 20px;
    }
</style>